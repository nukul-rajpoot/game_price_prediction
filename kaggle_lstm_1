{"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30761,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import sys\nimport plotly.graph_objects as go\nimport pandas as pd\nimport requests\nimport numpy as np\nimport os\nimport random\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import LSTM\nfrom tensorflow.keras.callbacks import TensorBoard\nfrom tensorflow.keras import backend as K\nfrom tensorflow.keras.optimizers import Adam\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import explained_variance_score\nfrom sklearn.metrics import median_absolute_error\nfrom sklearn.preprocessing import StandardScaler\nimport skopt\nfrom skopt import gp_minimize, forest_minimize\nfrom skopt.space import Real, Categorical, Integer\nfrom skopt.plots import plot_convergence\nfrom skopt.plots import plot_objective, plot_evaluations\nfrom skopt.plots import plot_histogram, plot_objective_2D\nfrom skopt.utils import use_named_args\n\nsys.path.insert(0, os.path.abspath('../..'))\n\n    \n\nrandom.seed(42)\nnp.random.seed(42)\ntf.random.set_seed(42)\n\n\n","metadata":{"execution":{"iopub.status.busy":"2024-08-24T20:49:00.752276Z","iopub.execute_input":"2024-08-24T20:49:00.752817Z","iopub.status.idle":"2024-08-24T20:49:00.766499Z","shell.execute_reply.started":"2024-08-24T20:49:00.752770Z","shell.execute_reply":"2024-08-24T20:49:00.764968Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"code","source":"#DO NOT USE FOR LOCAL - KAGGLE ONLY\ndef fetch_item_from_api(item, dailyCookie):\n    # get historical price data of item from API\n    url = \"https://steamcommunity.com/market/pricehistory/\"\n    params = {\n        'country': 'US',\n        'currency': '1',\n        'appid': '730',\n        'market_hash_name': item\n    }\n    cookies = {'steamLoginSecure': dailyCookie}\n\n    response = requests.get(url, params=params, cookies=cookies)\n    json_data = response.json()\n    \n    # print error message if request failed\n    if response.status_code != 200:\n        print(f\"Failed to fetch data for {item}. Status code: {response.status_code}\")\n        return None \n           \n    # convert and clean data to dataframe object\n    price_history = json_data['prices']\n    price_history_df = pd.DataFrame(price_history, columns=['date', 'price_usd', 'volume'])\n    price_history_df['date'] = pd.to_datetime(price_history_df['date'].str[0:-4], format='%b %d %Y %H')\n    price_history_df['volume'] = pd.to_numeric(price_history_df['volume'])\n    price_history_df.set_index('date', inplace=True)\n   \n    return price_history_df\ndef fetch_item_to_df(item, dailyCookie):\n    price_history_df = fetch_item_from_api(item, dailyCookie)\n    grouped_current_item = price_history_df.groupby(pd.Grouper(freq='D')).agg({\n    'price_usd':'median',\n    'volume':'sum'\n    })\n    return grouped_current_item\n\ndef get_cookie_from_blob():\n    blob_url = \"https://steamgraphsstorage.blob.core.windows.net/container-for-blob/cookie.txt?sp=rwd&st=2024-08-06T20:45:18Z&se=2025-09-10T04:45:18Z&spr=https&sv=2022-11-02&sr=c&sig=MKticGz9P9HPI7iXp1a6yuErc5Sv6P9fY%2FfCbxL0PLg%3D\"\n    response = requests.get(blob_url)\n    response.raise_for_status()\n    return response.text\n\n\ndef fetch_items():\n    items = [\"Glove Case Key\", \"Officer Jacques Beltram | Gendarmerie Nationale\", \"Kilowatt Case\", \"AK-47 | Blue Laminate (Factory New)\", \"Glove Case\", \"★ StatTrak™ Paracord Knife | Case Hardened (Field-Tested)\"]\n    return items\n\ndailyCookie = get_cookie_from_blob()\nitems = fetch_items()\ncurrent_item = fetch_item_to_df(items[4], dailyCookie)\ndf = current_item\n","metadata":{"execution":{"iopub.status.busy":"2024-08-24T20:49:00.769031Z","iopub.execute_input":"2024-08-24T20:49:00.769603Z","iopub.status.idle":"2024-08-24T20:49:01.710986Z","shell.execute_reply.started":"2024-08-24T20:49:00.769509Z","shell.execute_reply":"2024-08-24T20:49:01.709433Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"markdown","source":"Get original DataFrame","metadata":{}},{"cell_type":"code","source":"dailyCookie = get_cookie_from_blob()\nitems = fetch_items()\n\ncurrent_item = fetch_item_to_df(items[4], dailyCookie)\n#print(items[4])\n\n#print(current_item.tail())\n#print(non_aggregated_item.tail())\n\ndf = current_item\n\nos. getcwd()","metadata":{"execution":{"iopub.status.busy":"2024-08-24T20:49:01.712624Z","iopub.execute_input":"2024-08-24T20:49:01.713031Z","iopub.status.idle":"2024-08-24T20:49:02.553911Z","shell.execute_reply.started":"2024-08-24T20:49:01.712988Z","shell.execute_reply":"2024-08-24T20:49:02.552628Z"},"trusted":true},"execution_count":12,"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"'/kaggle/working'"},"metadata":{}}]},{"cell_type":"code","source":"# Fill missing values if any\ndf = df.fillna(method='ffill')\n\n# Scale the data\nscaler = MinMaxScaler(feature_range=(0, 1))\ndf['scaled_price'] = scaler.fit_transform(df[['price_usd']])","metadata":{"execution":{"iopub.status.busy":"2024-08-24T20:49:02.556762Z","iopub.execute_input":"2024-08-24T20:49:02.557188Z","iopub.status.idle":"2024-08-24T20:49:02.569986Z","shell.execute_reply.started":"2024-08-24T20:49:02.557145Z","shell.execute_reply":"2024-08-24T20:49:02.568655Z"},"trusted":true},"execution_count":13,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_36/4107923271.py:2: FutureWarning: DataFrame.fillna with 'method' is deprecated and will raise in a future version. Use obj.ffill() or obj.bfill() instead.\n  df = df.fillna(method='ffill')\n","output_type":"stream"}]},{"cell_type":"code","source":"seq_length = 2  # Length of the sequence\ny_shift = -1 # t+x should be a negative value for predictions future\n\ncounter = 0\n# Create columns for each step in the sequence\nfor i in range(1, seq_length + 1):\n    df[f't-{i}'] = df['scaled_price'].shift(i)\n    counter += 1\n\n\ndf['y_shift'] = df['scaled_price'].shift(y_shift)  # y is the next value in the sequence (t+1)\n# Drop rows with NaN values that were introduced by shifting\n\ndf.dropna(inplace=True)\nprint(df)\nprint(counter)","metadata":{"execution":{"iopub.status.busy":"2024-08-24T20:49:02.571680Z","iopub.execute_input":"2024-08-24T20:49:02.572148Z","iopub.status.idle":"2024-08-24T20:49:02.597914Z","shell.execute_reply.started":"2024-08-24T20:49:02.572099Z","shell.execute_reply":"2024-08-24T20:49:02.596655Z"},"trusted":true},"execution_count":14,"outputs":[{"name":"stdout","text":"            price_usd  volume  scaled_price       t-1       t-2   y_shift\ndate                                                                     \n2016-12-01      2.618   48668      0.417959  0.551680  1.000000  0.319283\n2016-12-02      2.007   54474      0.319283  0.417959  0.551680  0.246609\n2016-12-03      1.557   64918      0.246609  0.319283  0.417959  0.197674\n2016-12-04      1.254   61785      0.197674  0.246609  0.319283  0.184109\n2016-12-05      1.170   46688      0.184109  0.197674  0.246609  0.165859\n...               ...     ...           ...       ...       ...       ...\n2024-08-19      5.679    3528      0.912306  0.926518  0.949451  0.905523\n2024-08-20      5.637    3328      0.905523  0.912306  0.926518  0.896802\n2024-08-21      5.583    2960      0.896802  0.905523  0.912306  0.888889\n2024-08-22      5.534    3216      0.888889  0.896802  0.905523  0.870155\n2024-08-23      5.418    3160      0.870155  0.888889  0.896802  0.876292\n\n[2823 rows x 6 columns]\n2\n","output_type":"stream"}]},{"cell_type":"code","source":"X_labels = [f't-{i}' for i in range(1, seq_length + 1)]\ny_label = 'y_shift' #(t+1)\n\nX = df[X_labels]\ny = df[y_label]\n\nsplit_train = int(0.7 * len(X))  # First 70% for training\nsplit_val = int(0.85 * len(X))   \n\n# Split the data\nX_train = X[:split_train]\ny_train = y[:split_train]\n\nX_val = X[split_train:split_val]\ny_val = y[split_train:split_val]\n\n\n#convert to numpy arrays\nX_valnp = X_val.to_numpy()\ny_valnp = y_val.to_numpy()\n#X_valnp_reshape = np.reshape(X_valnp, (X_valnp.shape[0], 1, X_valnp.shape[1]))\nvalidation_data = (X_valnp, y_valnp)\n\n#print((X_valnp))\n\nX_test = X[split_val:]\ny_test = y[split_val:]\n\n\n\n# scaler = StandardScaler()\n# X_train_scaled = scaler.fit_transform(X_train)\n# X_test_scaled = scaler.transform(X_test)\n\nX_train_reshaped = np.reshape(X_train, (X_train.shape[0], 1, X_train.shape[1]))\nX_test_reshaped = np.reshape(X_test, (X_test.shape[0], 1, X_test.shape[1]))\n\n","metadata":{"execution":{"iopub.status.busy":"2024-08-24T20:49:02.599787Z","iopub.execute_input":"2024-08-24T20:49:02.600312Z","iopub.status.idle":"2024-08-24T20:49:02.614134Z","shell.execute_reply.started":"2024-08-24T20:49:02.600255Z","shell.execute_reply":"2024-08-24T20:49:02.612760Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"markdown","source":"Creates and fit the LSTM network","metadata":{}},{"cell_type":"code","source":"\ndef create_old_model():\n    model = Sequential()\n    model.add(LSTM(4, input_shape=(seq_length,1)))\n    model.add(Dense(1))\n    model.compile(loss='mean_squared_error', optimizer='adam')\n    model.fit(X_train,y_train, epochs=2, batch_size=1, verbose=2)\n    return model\n\ndef create_model(learning_rate=1e-5, num_dense_layers=1,\n                 num_dense_nodes=16, activation='sigmoid', num_lstm_layers=1, num_lstm_nodes=8):\n    \n    \n\n    if isinstance(num_lstm_nodes, np.integer):\n         num_lstm_nodes=num_lstm_nodes.item()\n\n    \"\"\"\n    Hyper-parameters:\n    learning_rate:     Learning-rate for the optimizer.\n    num_dense_layers:  Number of dense layers.\n    num_dense_nodes:   Number of nodes in each dense layer.\n    activation:        Activation function for all layers.\n    \"\"\"\n    \n    # Start construction of a Keras Sequential model.\n    model = Sequential()\n\n    model.add(LSTM(4,return_sequences=True, input_shape=(seq_length, 1)))\n    \n    # Add fully-connected / dense layers.\n    # The number of layers is a hyper-parameter we want to optimize.\n\n    # for i in range(num_lstm_nodes):\n    #         model.add(LSTM(num_lstm_nodes, input_shape=(seq_length,1)))\n    \n    \n    \n    for i in range(num_lstm_layers):\n        # Name of the layer. This is not really necessary\n        # because Keras should give them unique names.\n        name = 'layer_lstm_{0}'.format(i+1)\n\n        # Add the dense / fully-connected layer to the model.\n        # This has two hyper-parameters we want to optimize:\n        # The number of nodes and the activation function.\n        model.add(LSTM(num_lstm_nodes,return_sequences=True))\n        \n        #Last LSTM layer always has to have return_sequences=False\n    model.add(LSTM(num_lstm_nodes,return_sequences=False))\n    \n    \n    for i in range(num_dense_layers):\n        # Name of the layer. This is not really necessary\n        # because Keras should give them unique names.\n        name = 'layer_dense_{0}'.format(i+1)\n\n        # Add the dense / fully-connected layer to the model.\n        # This has two hyper-parameters we want to optimize:\n        # The number of nodes and the activation function.\n        model.add(Dense(num_dense_nodes,\n                        activation=activation,\n                        name=name))\n\n    # Last fully-connected / dense layer with softmax-activation\n    # for use in classification.\n    model.add(Dense(1))\n    \n    \n    # Use the Adam method for training the network.\n    # We want to find the best learning-rate for the Adam method.\n    optimizer = Adam(learning_rate)\n    \n    # In Keras we need to compile the model so it can be trained.\n    model.compile(optimizer=optimizer,\n                  loss='mean_squared_error',\n                  metrics=['mean_squared_error'])\n    \n    return model\n","metadata":{"execution":{"iopub.status.busy":"2024-08-24T20:49:02.616291Z","iopub.execute_input":"2024-08-24T20:49:02.616774Z","iopub.status.idle":"2024-08-24T20:49:02.632131Z","shell.execute_reply.started":"2024-08-24T20:49:02.616726Z","shell.execute_reply":"2024-08-24T20:49:02.630640Z"},"trusted":true},"execution_count":16,"outputs":[]},{"cell_type":"markdown","source":"Hyperparameter Tuning","metadata":{}},{"cell_type":"code","source":"def log_dir_name(learning_rate, num_dense_layers,\n                 num_dense_nodes, activation,num_lstm_layers,num_lstm_nodes):\n\n    # The dir-name for the TensorBoard log-dir.\n    s = \"./19_logs/lr_{0:.0e}_layers_{1}_nodes_{2}_{3}/\"\n\n    # Insert all the hyper-parameters in the dir-name.\n    log_dir = s.format(learning_rate,\n                       num_dense_layers,\n                       num_dense_nodes,\n                       activation,num_lstm_layers,num_lstm_nodes)\n\n    return log_dir\n\ndim_learning_rate = Real(low=1e-6, high=1e-2, prior='log-uniform',\n                         name='learning_rate')\ndim_num_dense_layers = Integer(low=1, high=5, name='num_dense_layers')\ndim_num_dense_nodes = Integer(low=5, high=512, name='num_dense_nodes')\ndim_activation = Categorical(categories=['relu', 'sigmoid'],\n                             name='activation')\ndim_num_lstm_layers = Integer(low=0, high =3, name = 'num_lstm_layers')\ndim_num_lstm_nodes=Integer(low=4, high=32,name = 'num_lstm_nodes')\nprint(type(dim_num_lstm_nodes))\n#dim_num_lstm_nodes = Integer(low=1, high=5, name='num_lstm_nodes')\ndimensions = [dim_learning_rate,\n              dim_num_dense_layers,\n              dim_num_dense_nodes,\n              dim_activation,dim_num_lstm_layers, dim_num_lstm_nodes]\ndefault_parameters = [1e-5, 1, 16, 'relu',1, 8]\nprint(type(dim_activation))\nprint(type(dim_learning_rate))\nprint(type(dim_num_dense_layers))\nprint(type(dim_num_dense_nodes))\n#def create_model():\n  #  model = Sequential()\n   # model.add(LSTM(4, input_shape=(seq_length, 1)))\n   # model.add(Dense(1))\n  #  model.compile(loss='mean_squared_error', optimizer='adam')\n   # model.fit(X_train, y_train, epochs=2, batch_size=1, verbose=2)\n\n    #return model\n\n\n\nbest_mse = 100000\n@use_named_args(dimensions=dimensions)\ndef fitness(learning_rate, num_dense_layers,\n            num_dense_nodes, activation,num_lstm_layers, num_lstm_nodes):\n    \"\"\"\n    Hyper-parameters:\n    learning_rate:     Learning-rate for the optimizer.\n    num_dense_layers:  Number of dense layers.\n    num_dense_nodes:   Number of nodes in each dense layer.\n    activation:        Activation function for all layers.\n    \"\"\"\n\n    # Print the hyper-parameters.\n    print('learning rate: {0:.1e}'.format(learning_rate))\n    print('num_dense_layers:', num_dense_layers)\n    print('num_dense_nodes:', num_dense_nodes)\n    print('activation:', activation)\n    print('num_lstm_layers:', num_lstm_layers)\n    print('num_lstm_nodes:', num_lstm_nodes,type(num_lstm_nodes))\n    \n    \n    # Create the neural network with these hyper-parameters.\n    model = create_model(learning_rate=learning_rate,\n                         num_dense_layers=num_dense_layers,\n                         num_dense_nodes=num_dense_nodes,\n                         activation=activation,num_lstm_layers=num_lstm_layers,num_lstm_nodes=num_lstm_nodes)\n\n    # Dir-name for the TensorBoard log-files.\n    log_dir = log_dir_name(learning_rate, num_dense_layers,\n                           num_dense_nodes, activation,num_lstm_layers,num_lstm_nodes)\n    \n    # Create a callback-function for Keras which will be\n    # run after each epoch has ended during training.\n    # This saves the log-files for TensorBoard.\n    # Note that there are complications when histogram_freq=1.\n    # It might give strange errors and it also does not properly\n    # support Keras data-generators for the validation-set.\n    callback_log = TensorBoard(\n        log_dir=log_dir,\n        histogram_freq=0,\n        write_graph=True,\n        # write_grads=False,\n        write_images=False)\n   \n    # Use Keras to train the model.\n    history = model.fit(x=X_train,\n                        y=y_train,\n                        epochs=2,\n                        batch_size=1,\n                        validation_data=validation_data,\n                        callbacks=[callback_log])\n\n    # Get the classification accuracy on the validation-set\n    # after the last training-epoch.\n    mse = history.history['mean_squared_error'][-1]\n\n    # Print the classification accuracy.\n    print()\n    print(\"Mean Squared Error: 0:.2\".format(mse))\n    print()\n\n    # Save the model if it improves on the best-found performance.\n    # We use the global keyword so we update the variable outside\n    # of this function.\n    global best_mse\n    #If the classification accuracy of the saved model is improved ...\n    if mse < best_mse:\n        # Save the new model to harddisk.\n        model.save('best_lstm_model.keras')\n        #model is saved in same location as notebook\n        # Update the classification accuracy.\n        best_mse = mse\n\n    # Delete the Keras model with these hyper-parameters from memory.\n    del model\n    \n    # Clear the Keras session, otherwise it will keep adding new\n    # models to the same TensorFlow graph each time we create\n    # a model with a different set of hyper-parameters.\n    K.clear_session()\n    \n    # NOTE: Scikit-optimize does minimization so it tries to\n    # find a set of hyper-parameters with the LOWEST fitness-value.\n    # Because we are interested in the HIGHEST classification\n    # accuracy, we need to negate this number so it can be minimized.\n    return mse\n","metadata":{"execution":{"iopub.status.busy":"2024-08-24T20:49:02.634352Z","iopub.execute_input":"2024-08-24T20:49:02.634837Z","iopub.status.idle":"2024-08-24T20:49:02.666356Z","shell.execute_reply.started":"2024-08-24T20:49:02.634778Z","shell.execute_reply":"2024-08-24T20:49:02.665009Z"},"trusted":true},"execution_count":17,"outputs":[{"name":"stdout","text":"<class 'skopt.space.space.Integer'>\n<class 'skopt.space.space.Categorical'>\n<class 'skopt.space.space.Real'>\n<class 'skopt.space.space.Integer'>\n<class 'skopt.space.space.Integer'>\n","output_type":"stream"}]},{"cell_type":"code","source":"fitness(x=default_parameters)\nsearch_result = gp_minimize(func=fitness,\n                            dimensions=dimensions,\n                            acq_func='EI', # Expected Improvement.\n                            n_calls=11,\n                            x0=default_parameters)","metadata":{"execution":{"iopub.status.busy":"2024-08-24T20:49:02.667875Z","iopub.execute_input":"2024-08-24T20:49:02.668267Z","iopub.status.idle":"2024-08-24T20:55:05.870270Z","shell.execute_reply.started":"2024-08-24T20:49:02.668223Z","shell.execute_reply":"2024-08-24T20:55:05.868574Z"},"trusted":true},"execution_count":18,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/keras/src/layers/rnn/rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n  super().__init__(**kwargs)\n","output_type":"stream"},{"name":"stdout","text":"learning rate: 1.0e-05\nnum_dense_layers: 1\nnum_dense_nodes: 16\nactivation: relu\nnum_lstm_layers: 1\nnum_lstm_nodes: 8 <class 'int'>\nEpoch 1/2\n\u001b[1m1976/1976\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m15s\u001b[0m 5ms/step - loss: 0.0109 - mean_squared_error: 0.0109 - val_loss: 0.1738 - val_mean_squared_error: 0.1738\nEpoch 2/2\n\u001b[1m1976/1976\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 5ms/step - loss: 0.0088 - mean_squared_error: 0.0088 - val_loss: 0.1598 - val_mean_squared_error: 0.1598\n\nMean Squared Error: 0:.2\n\nlearning rate: 1.0e-05\nnum_dense_layers: 1\nnum_dense_nodes: 16\nactivation: relu\nnum_lstm_layers: 1\nnum_lstm_nodes: 8 <class 'int'>\nEpoch 1/2\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/keras/src/layers/rnn/rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n  super().__init__(**kwargs)\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m1976/1976\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m15s\u001b[0m 5ms/step - loss: 0.0106 - mean_squared_error: 0.0106 - val_loss: 0.1668 - val_mean_squared_error: 0.1668\nEpoch 2/2\n\u001b[1m1976/1976\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 5ms/step - loss: 0.0084 - mean_squared_error: 0.0084 - val_loss: 0.1528 - val_mean_squared_error: 0.1528\n\nMean Squared Error: 0:.2\n\nlearning rate: 1.5e-03\nnum_dense_layers: 2\nnum_dense_nodes: 400\nactivation: sigmoid\nnum_lstm_layers: 1\nnum_lstm_nodes: 7 <class 'numpy.int64'>\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/keras/src/layers/rnn/rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n  super().__init__(**kwargs)\n","output_type":"stream"},{"name":"stdout","text":"Epoch 1/2\n\u001b[1m1976/1976\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m18s\u001b[0m 7ms/step - loss: 0.0876 - mean_squared_error: 0.0876 - val_loss: 0.0058 - val_mean_squared_error: 0.0058\nEpoch 2/2\n\u001b[1m1976/1976\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 7ms/step - loss: 0.0028 - mean_squared_error: 0.0028 - val_loss: 0.0111 - val_mean_squared_error: 0.0111\n\nMean Squared Error: 0:.2\n\nlearning rate: 6.9e-05\nnum_dense_layers: 2\nnum_dense_nodes: 77\nactivation: sigmoid\nnum_lstm_layers: 0\nnum_lstm_nodes: 24 <class 'numpy.int64'>\nEpoch 1/2\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/keras/src/layers/rnn/rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n  super().__init__(**kwargs)\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m1976/1976\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 5ms/step - loss: 0.2177 - mean_squared_error: 0.2177 - val_loss: 0.1529 - val_mean_squared_error: 0.1529\nEpoch 2/2\n\u001b[1m1976/1976\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 4ms/step - loss: 0.0078 - mean_squared_error: 0.0078 - val_loss: 0.1106 - val_mean_squared_error: 0.1106\n\nMean Squared Error: 0:.2\n\nlearning rate: 5.7e-03\nnum_dense_layers: 1\nnum_dense_nodes: 508\nactivation: sigmoid\nnum_lstm_layers: 2\nnum_lstm_nodes: 4 <class 'numpy.int64'>\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/keras/src/layers/rnn/rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n  super().__init__(**kwargs)\n","output_type":"stream"},{"name":"stdout","text":"Epoch 1/2\n\u001b[1m1976/1976\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m17s\u001b[0m 6ms/step - loss: 0.0258 - mean_squared_error: 0.0258 - val_loss: 0.0102 - val_mean_squared_error: 0.0102\nEpoch 2/2\n\u001b[1m1976/1976\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 6ms/step - loss: 0.0054 - mean_squared_error: 0.0054 - val_loss: 0.0169 - val_mean_squared_error: 0.0169\n\nMean Squared Error: 0:.2\n\nlearning rate: 1.2e-06\nnum_dense_layers: 3\nnum_dense_nodes: 208\nactivation: relu\nnum_lstm_layers: 3\nnum_lstm_nodes: 11 <class 'numpy.int64'>\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/keras/src/layers/rnn/rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n  super().__init__(**kwargs)\n","output_type":"stream"},{"name":"stdout","text":"Epoch 1/2\n\u001b[1m1976/1976\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 8ms/step - loss: 0.0111 - mean_squared_error: 0.0111 - val_loss: 0.1777 - val_mean_squared_error: 0.1777\nEpoch 2/2\n\u001b[1m1976/1976\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m15s\u001b[0m 7ms/step - loss: 0.0091 - mean_squared_error: 0.0091 - val_loss: 0.1632 - val_mean_squared_error: 0.1632\n\nMean Squared Error: 0:.2\n\nlearning rate: 2.3e-06\nnum_dense_layers: 3\nnum_dense_nodes: 199\nactivation: sigmoid\nnum_lstm_layers: 1\nnum_lstm_nodes: 28 <class 'numpy.int64'>\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/keras/src/layers/rnn/rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n  super().__init__(**kwargs)\n","output_type":"stream"},{"name":"stdout","text":"Epoch 1/2\n\u001b[1m1976/1976\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m18s\u001b[0m 7ms/step - loss: 0.1535 - mean_squared_error: 0.1535 - val_loss: 0.1485 - val_mean_squared_error: 0.1485\nEpoch 2/2\n\u001b[1m1976/1976\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 6ms/step - loss: 0.0081 - mean_squared_error: 0.0081 - val_loss: 0.1495 - val_mean_squared_error: 0.1495\n\nMean Squared Error: 0:.2\n\nlearning rate: 5.3e-04\nnum_dense_layers: 3\nnum_dense_nodes: 12\nactivation: sigmoid\nnum_lstm_layers: 2\nnum_lstm_nodes: 15 <class 'numpy.int64'>\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/keras/src/layers/rnn/rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n  super().__init__(**kwargs)\n","output_type":"stream"},{"name":"stdout","text":"Epoch 1/2\n\u001b[1m1976/1976\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 7ms/step - loss: 0.0100 - mean_squared_error: 0.0100 - val_loss: 0.0335 - val_mean_squared_error: 0.0335\nEpoch 2/2\n\u001b[1m1976/1976\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 7ms/step - loss: 1.8189e-04 - mean_squared_error: 1.8189e-04 - val_loss: 0.0221 - val_mean_squared_error: 0.0221\n\nMean Squared Error: 0:.2\n\nlearning rate: 1.2e-06\nnum_dense_layers: 2\nnum_dense_nodes: 127\nactivation: sigmoid\nnum_lstm_layers: 2\nnum_lstm_nodes: 27 <class 'numpy.int64'>\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/keras/src/layers/rnn/rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n  super().__init__(**kwargs)\n","output_type":"stream"},{"name":"stdout","text":"Epoch 1/2\n\u001b[1m1976/1976\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 7ms/step - loss: 0.0081 - mean_squared_error: 0.0081 - val_loss: 0.1484 - val_mean_squared_error: 0.1484\nEpoch 2/2\n\u001b[1m1976/1976\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 6ms/step - loss: 0.0081 - mean_squared_error: 0.0081 - val_loss: 0.1484 - val_mean_squared_error: 0.1484\n\nMean Squared Error: 0:.2\n\nlearning rate: 4.9e-06\nnum_dense_layers: 3\nnum_dense_nodes: 97\nactivation: sigmoid\nnum_lstm_layers: 1\nnum_lstm_nodes: 10 <class 'numpy.int64'>\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/keras/src/layers/rnn/rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n  super().__init__(**kwargs)\n","output_type":"stream"},{"name":"stdout","text":"Epoch 1/2\n\u001b[1m1976/1976\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m16s\u001b[0m 6ms/step - loss: 0.0392 - mean_squared_error: 0.0392 - val_loss: 0.1487 - val_mean_squared_error: 0.1487\nEpoch 2/2\n\u001b[1m1976/1976\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 5ms/step - loss: 0.0081 - mean_squared_error: 0.0081 - val_loss: 0.1490 - val_mean_squared_error: 0.1490\n\nMean Squared Error: 0:.2\n\nlearning rate: 1.9e-04\nnum_dense_layers: 1\nnum_dense_nodes: 432\nactivation: relu\nnum_lstm_layers: 1\nnum_lstm_nodes: 30 <class 'numpy.int64'>\nEpoch 1/2\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/keras/src/layers/rnn/rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n  super().__init__(**kwargs)\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m1976/1976\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m15s\u001b[0m 5ms/step - loss: 0.0044 - mean_squared_error: 0.0044 - val_loss: 6.7192e-04 - val_mean_squared_error: 6.7192e-04\nEpoch 2/2\n\u001b[1m1976/1976\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 5ms/step - loss: 2.7295e-04 - mean_squared_error: 2.7295e-04 - val_loss: 0.0011 - val_mean_squared_error: 0.0011\n\nMean Squared Error: 0:.2\n\nlearning rate: 8.1e-04\nnum_dense_layers: 2\nnum_dense_nodes: 294\nactivation: sigmoid\nnum_lstm_layers: 3\nnum_lstm_nodes: 28 <class 'numpy.int64'>\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/keras/src/layers/rnn/rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n  super().__init__(**kwargs)\n","output_type":"stream"},{"name":"stdout","text":"Epoch 1/2\n\u001b[1m1976/1976\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 8ms/step - loss: 0.0256 - mean_squared_error: 0.0256 - val_loss: 0.0096 - val_mean_squared_error: 0.0096\nEpoch 2/2\n\u001b[1m1976/1976\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m14s\u001b[0m 7ms/step - loss: 4.3319e-04 - mean_squared_error: 4.3319e-04 - val_loss: 0.0133 - val_mean_squared_error: 0.0133\n\nMean Squared Error: 0:.2\n\n","output_type":"stream"}]},{"cell_type":"code","source":"best_model=tf.keras.models.load_model('best_lstm_model.keras')\n#model is saved in same location as notebook\n#best_model = create_old_model()\ny_valpred = best_model.predict(X_val)\nunscaledvalpred = scaler.inverse_transform(y_valpred)\nunscaledvaly = scaler.inverse_transform([y_val])\nrowunscaledvaly = unscaledvaly.reshape(-1,1)","metadata":{"execution":{"iopub.status.busy":"2024-08-24T20:55:05.874976Z","iopub.execute_input":"2024-08-24T20:55:05.876193Z","iopub.status.idle":"2024-08-24T20:55:07.275555Z","shell.execute_reply.started":"2024-08-24T20:55:05.876130Z","shell.execute_reply":"2024-08-24T20:55:07.274229Z"},"trusted":true},"execution_count":19,"outputs":[{"name":"stdout","text":"\u001b[1m14/14\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 38ms/step\n","output_type":"stream"}]},{"cell_type":"code","source":"testScore = np.sqrt(mean_squared_error(unscaledvaly[0], unscaledvalpred[:,0]))  #Root mean squared error\nr2 = r2_score(unscaledvaly[0], unscaledvalpred[:, 0]) #R2 score - This provides an indication of the goodness of fit and therefore a measure of how well unseen samples are likely to be predicted by the model. It is the proportion of the variance in the dependent variable that is predictable from the independent variables.\nexplained_variance = explained_variance_score(unscaledvaly[0], unscaledvalpred[:, 0])  #Explained variance score  this measures the proportion to which a mathematical model accounts for the variation (dispersion) of a given data set. It is the proportion of the variance in the dependent variable that is predictable from the independent variables\nmedae = median_absolute_error(unscaledvaly[0], unscaledvalpred[:, 0])\nmae = mean_absolute_error(unscaledvaly[0], unscaledvalpred[:, 0])\nmape = np.mean(np.abs((unscaledvaly[0] - unscaledvalpred[:, 0]) / unscaledvaly[0])) * 100\n\nprint('Test Score: %.2f RMSE' % (testScore))\nprint('R2 Score: %.2f' % (r2))\nprint('Explained Variance: %.2f' % (explained_variance))\nprint('Median Absolute Error: %.2f' % (medae))\nprint('Mean Absolute Error: %.2f' % (mae))\nprint('Mean Absolute Percentage Error: %.2f' % (mape)+'%')","metadata":{"execution":{"iopub.status.busy":"2024-08-24T20:55:07.277247Z","iopub.execute_input":"2024-08-24T20:55:07.277691Z","iopub.status.idle":"2024-08-24T20:55:07.293022Z","shell.execute_reply.started":"2024-08-24T20:55:07.277647Z","shell.execute_reply":"2024-08-24T20:55:07.291684Z"},"trusted":true},"execution_count":20,"outputs":[{"name":"stdout","text":"Test Score: 0.21 RMSE\nR2 Score: 0.91\nExplained Variance: 0.94\nMedian Absolute Error: 0.08\nMean Absolute Error: 0.14\nMean Absolute Percentage Error: 4.25%\n","output_type":"stream"}]},{"cell_type":"code","source":"# # shift train predictions for plotting\n# trainPredictPlot = np.empty_like(dataset)\n\n# trainPredictPlot[:, :] = np.nan\n\n# #trainPredictPlot[look_back:len(trainPredict)+look_back, :] = trainPredict\n\n\n\nplt.grid()\nplt.title(\"LSTM - Predicted vs Actual\")\nplt.xlabel(\"Date\")\nplt.ylabel(\"Price (USD)\")\nplt.plot(unscaledvalpred , label = \"Predicted\") #ȳ\nplt.plot(rowunscaledvaly, label = \"Actual\") #ground truth values\nplt.legend(loc=\"upper left\")\nplt.show()\nprint(testScore)","metadata":{"execution":{"iopub.status.busy":"2024-08-24T20:55:07.294732Z","iopub.execute_input":"2024-08-24T20:55:07.295190Z","iopub.status.idle":"2024-08-24T20:55:07.643041Z","shell.execute_reply.started":"2024-08-24T20:55:07.295129Z","shell.execute_reply":"2024-08-24T20:55:07.641904Z"},"trusted":true},"execution_count":21,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}},{"name":"stdout","text":"0.20718892573216466\n","output_type":"stream"}]}]}